// This file is auto-generated by @hey-api/openapi-ts

import { type Options, UserService } from '../sdk.gen';
import { queryOptions, type UseMutationOptions, type DefaultError } from '@tanstack/react-query';
import type { UserGetUsersData, UserCreateUserData, UserCreateUserResponse, UserDeleteUserData, UserDeleteUserResponse, UserGetUserData, UserUpdateUserData, UserUpdateUserResponse } from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const userGetUsersQueryKey = (options?: Options<UserGetUsersData>) => createQueryKey('userGetUsers', options);

export const userGetUsersOptions = (options?: Options<UserGetUsersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await UserService.userGetUsers({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: userGetUsersQueryKey(options)
    });
};

export const userCreateUserQueryKey = (options: Options<UserCreateUserData>) => createQueryKey('userCreateUser', options);

export const userCreateUserOptions = (options: Options<UserCreateUserData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await UserService.userCreateUser({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: userCreateUserQueryKey(options)
    });
};

export const userCreateUserMutation = (options?: Partial<Options<UserCreateUserData>>) => {
    const mutationOptions: UseMutationOptions<UserCreateUserResponse, DefaultError, Options<UserCreateUserData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await UserService.userCreateUser({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const userDeleteUserMutation = (options?: Partial<Options<UserDeleteUserData>>) => {
    const mutationOptions: UseMutationOptions<UserDeleteUserResponse, DefaultError, Options<UserDeleteUserData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await UserService.userDeleteUser({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const userGetUserQueryKey = (options: Options<UserGetUserData>) => createQueryKey('userGetUser', options);

export const userGetUserOptions = (options: Options<UserGetUserData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await UserService.userGetUser({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: userGetUserQueryKey(options)
    });
};

export const userUpdateUserMutation = (options?: Partial<Options<UserUpdateUserData>>) => {
    const mutationOptions: UseMutationOptions<UserUpdateUserResponse, DefaultError, Options<UserUpdateUserData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await UserService.userUpdateUser({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};